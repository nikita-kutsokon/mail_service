generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Contact {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String

  age                 Int
  city                String
  email               String            @unique
  gender              String
  country             String
  timezone            String
  occupation          String
  sourceOfReferral    String //TODO: Define default sources
  intershipMotivation String
  
  eduQuestEventTimestamp String?
  eduQuestSelectedDateTime DateTime?
  eduQuestDecision    EduQuestDecision?

  birthDate                DateTime  @db.Date
  
  isSubscribed               Boolean @default(true)
  isEqParticipationConfirmed Boolean @default(false)

  createdAt DateTime @default(now()) @db.Date

  listIds String[]        @db.ObjectId
  lists   ContactstList[] @relation(fields: [listIds], references: [id])

  SentMail          SentMail[]
  ScheduledMail     ScheduledMail[]
  ContactsActions   ContactsActions[]
  UnsubscribedUsers UnsubscribedUsers[]
}

model Users {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  password String
  name     String
  token    String?
}

model ContactstList {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String    @unique
  eduQuestStartDate DateTime? @unique
  createdAt         DateTime  @default(now()) @db.Date

  contactIds String[]  @db.ObjectId
  contacts   Contact[] @relation(fields: [contactIds], references: [id])
}

model ContactsActions {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  activityDescription String
  typeOfActivity      TypeOfActivity
  createdAt           DateTime       @default(now()) @db.Date

  contactId String  @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id])

  templateId String       @db.ObjectId
  template   MailTemplate @relation(fields: [templateId], references: [id])
}

model UnsubscribedUsers {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  activityDescription String
  createdAt           DateTime @default(now()) @db.Date

  contactId String  @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id]) 
}

// MAILS
model ScheduledMail {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  scheduledDate      DateTime @db.Date
  useContactTimezone Boolean  @default(false)

  contactId String  @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  templateId String       @db.ObjectId
  template   MailTemplate @relation(fields: [templateId], references: [id])

  mailingAutomationId String?            @db.ObjectId
  mailingAutomation   MailingAutomation? @relation(fields: [mailingAutomationId], references: [id])
}

model SentMail {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  emailId       String       @unique
  scheduledDate DateTime     @db.Date
  emailStatus   EmailStatus? @default(PENDING)

  contactId String  @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  templateId String       @db.ObjectId
  template   MailTemplate @relation(fields: [templateId], references: [id])
}

model MailTemplate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name              String
  googleDriveFileId String
  createdAt         DateTime @default(now()) @db.Date

  sentMails                SentMail[]
  scheduledMails           ScheduledMail[]
  ContactsActions          ContactsActions[]
  AutomationScheduledMails AutomationScheduledMail[]
}

model ContactDataPlacehodelr {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  contactFieldName String
  placeholderTag   String
}

// MAILING AUTOMATIONS 
model MailingAutomation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  scheduledMails           ScheduledMail[]
  automationScheduledMails AutomationScheduledMail[]
}

model AutomationScheduledMail {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  useContactTimezone Boolean
  scheduledDate      DateTime @db.Date

  templateId String       @db.ObjectId
  template   MailTemplate @relation(fields: [templateId], references: [id])

  mailingAutomationId String            @db.ObjectId
  mailingAutomation   MailingAutomation @relation(fields: [mailingAutomationId], references: [id], onDelete: Cascade)
}

// ENUMS
enum EmailStatus {
  PENDING
  OPENED
}

enum TypeOfActivity {
  EMAIL
  LINK
}

enum EduQuestDecision {
  SELECTE
  TRY_AGAIN
  EGLISH_ISSUE
  WE_MISSED_YOU
}
