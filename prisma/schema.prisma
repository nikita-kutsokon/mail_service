generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Contact {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String

  age                 Int
  city                String
  email               String @unique
  gender              String
  country             String
  timezone            String
  occupation          String
  sourceOfReferral    String
  eduQuestDecision    String
  intershipMotivation String

  birthDate                DateTime @db.Date
  eduQuestSelectedDateTime DateTime @db.Date

  isSubscribed               Boolean @default(true)
  isEqParticipationConfirmed Boolean @default(false)

  createdAt DateTime @default(now()) @db.Date

  listIds String[]        @db.ObjectId
  lists   ContactstList[] @relation(fields: [listIds], references: [id])

  sentMail        SentMail[]
  scheduledMails  ScheduledMail[]
  ContactsActions ContactsActions[]
}

model ContactstList {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now()) @db.Date

  contactIds String[]  @db.ObjectId
  contacts   Contact[] @relation(fields: [contactIds], references: [id])
}

model ScheduledMail {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  contactId String  @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  templateId String       @db.ObjectId
  template   MailTemplate @relation(fields: [templateId], references: [id])

  timeZone           String
  scheduledDate      DateTime @db.Date
  useContactTimezone Boolean

  mailingAutomationId String?            @db.ObjectId
  mailingAutomation   MailingAutomation? @relation(fields: [mailingAutomationId], references: [id])
}

model SentMail {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  contactId String  @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  templateId String       @db.ObjectId
  template   MailTemplate @relation(fields: [templateId], references: [id])

  timeZone      String
  scheduledDate DateTime @db.Date

  emailId String @unique

  emailStatus EmailStatus? @default(PENDING)
}

model MailTemplate {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  googleDriveFileId String
  createdAt         DateTime @default(now()) @db.Date

  sentMails      SentMail[]
  scheduledMails ScheduledMail[]
  automationScheduledMails AutomationScheduledMails[]
}
model ContactDataPlacehodelr {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  contactFieldName String
  placeholderTag   String
}

model Users {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  password String
  name     String
  token    String?
}

model ContactsActions {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  contactId String  @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  typeOfActivity      TypeOfActivity
  activityDescription String
  createdAt           DateTime       @default(now()) @db.Date
}

model MailingAutomation {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  automationScheduledMails AutomationScheduledMails[]

  scheduledMails ScheduledMail[]
}

model AutomationScheduledMails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  templateId String       @db.ObjectId
  template   MailTemplate @relation(fields: [templateId], references: [id])

  timeZone           String
  useContactTimezone Boolean
  scheduledDate      DateTime @db.Date

  mailingAutomationId String            @db.ObjectId
  mailingAutomation   MailingAutomation @relation(fields: [mailingAutomationId], references: [id])
}

enum EmailStatus {
  PENDING
  OPENED
}

enum TypeOfActivity {
  EMAIL
  LINK
  UNSUBSCRIBE
}
